# Generated by Django 5.0.4 on 2025-05-16 11:52

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('games', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='BoosterPercent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('booster_percent1', models.IntegerField(default=22)),
                ('booster_percent2', models.IntegerField(default=24)),
                ('booster_percent3', models.IntegerField(default=27)),
                ('booster_percent4', models.IntegerField(default=30)),
                ('booster_percent5', models.IntegerField(default=35)),
            ],
        ),
        migrations.CreateModel(
            name='Captcha',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='')),
                ('value', models.CharField()),
            ],
        ),
        migrations.CreateModel(
            name='PromoCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=255, unique=True)),
                ('description', models.CharField(max_length=255, null=True)),
                ('discount_amount', models.FloatField()),
                ('expiration_date', models.DateField()),
                ('is_percent', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Tip_data',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payer_id', models.CharField(max_length=255, null=True)),
                ('invoice', models.TextField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='BaseUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('country', django_countries.fields.CountryField(blank=True, max_length=2, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('is_booster', models.BooleanField(default=False)),
                ('is_customer', models.BooleanField(default=False)),
                ('is_admin', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_online', models.BooleanField(default=False)),
                ('last_online', models.DateTimeField(default=django.utils.timezone.now)),
                ('activation_code', models.IntegerField(blank=True, null=True)),
                ('activation_time', models.DateTimeField(blank=True, null=True)),
                ('rest_password_code', models.IntegerField(blank=True, null=True)),
                ('rest_password_time', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='BaseOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, null=True)),
                ('details', models.CharField(default='no details', max_length=300)),
                ('game_type', models.CharField(choices=[('D', 'Division'), ('P', 'Placement'), ('A', 'Arena'), ('F', 'Faceit'), ('R', 'Raid'), ('RB', 'Raid Bundle'), ('DU', 'Dungeon'), ('DB', 'Dungeon Bundle')], max_length=10, null=True)),
                ('price', models.FloatField(blank=True, default=0, null=True)),
                ('actual_price', models.FloatField(blank=True, default=0, null=True)),
                ('real_order_price', models.FloatField()),
                ('money_owed', models.FloatField(blank=True, default=0, null=True)),
                ('invoice', models.CharField(max_length=2000)),
                ('status', models.CharField(blank=True, choices=[('New', 'New'), ('Droped', 'Droped'), ('Extend', 'Extend'), ('Done', 'Done'), ('Continue', 'Continue')], default='New', max_length=100, null=True)),
                ('duo_boosting', models.BooleanField(blank=True, default=False)),
                ('select_booster', models.BooleanField(blank=True, default=False)),
                ('turbo_boost', models.BooleanField(blank=True, default=False)),
                ('streaming', models.BooleanField(blank=True, default=False)),
                ('finish_image', models.ImageField(blank=True, null=True, upload_to='orders/images/')),
                ('is_done', models.BooleanField(blank=True, default=False)),
                ('is_drop', models.BooleanField(blank=True, default=False)),
                ('is_extended', models.BooleanField(blank=True, default=False)),
                ('customer_gamename', models.CharField(default='', max_length=300)),
                ('customer_password', models.CharField(blank=True, default='', max_length=300)),
                ('customer_username', models.CharField(default='', max_length=300)),
                ('customer_server', models.CharField(blank=True, max_length=300, null=True)),
                ('data_correct', models.BooleanField(blank=True, default=False)),
                ('message', models.CharField(blank=True, max_length=300, null=True)),
                ('payer_id', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('object_id', models.PositiveIntegerField(null=True)),
                ('pause', models.BooleanField(blank=True, default=False)),
                ('approved', models.BooleanField(blank=True, default=False)),
                ('wins_number', models.PositiveSmallIntegerField(blank=True, default=0)),
                ('booster', models.ForeignKey(blank=True, default=None, limit_choices_to={'is_booster': True}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='booster_orders', to=settings.AUTH_USER_MODEL)),
                ('content_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='contenttypes.contenttype')),
                ('customer', models.ForeignKey(blank=True, default=None, limit_choices_to={'is_customer': True}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='customer_orders', to=settings.AUTH_USER_MODEL)),
                ('game', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='game', to='games.game')),
                ('captcha', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='order', to='accounts.captcha')),
                ('promo_code', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='accounts.promocode')),
            ],
        ),
        migrations.CreateModel(
            name='TokenForPay',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=255, unique=True)),
                ('invoice', models.CharField(max_length=2000, null=True, unique=True)),
                ('game_info', models.TextField(max_length=2000)),
                ('is_paid', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField(default=0)),
                ('notice', models.TextField(default='_', max_length=100)),
                ('status', models.CharField(choices=[('New', 'New'), ('Drop', 'Drop'), ('Extend', 'Extend'), ('Done', 'Done'), ('Tip', 'Tip')], default='New', max_length=100)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('type', models.CharField(choices=[('DEPOSIT', 'Deposit'), ('WITHDRAWAL', 'Withdrawal')], max_length=20)),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='from_order', to='accounts.baseorder')),
                ('tip', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='tip', to='accounts.tip_data')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Wallet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('money', models.FloatField(blank=True, default=0, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='wallet', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
